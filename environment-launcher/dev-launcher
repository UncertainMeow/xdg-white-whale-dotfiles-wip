#!/usr/bin/env bash
# ~/.local/bin/dev-launcher
# Environment Launcher Magic - The Jake@Linux inspired system

set -euo pipefail

# Colors and UI
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configuration
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/dev-environments"
CONTAINERS_CONFIG="$CONFIG_DIR/containers.yaml"

# Check dependencies
check_deps() {
    local deps=(fzf yq)
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" > /dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        echo -e "${RED}❌ Missing dependencies: ${missing[*]}${NC}"
        echo -e "${YELLOW}💡 Install with: brew install ${missing[*]}${NC}"
        exit 1
    fi
    
    # Check Docker (with fallback for demo mode)
    if [[ "${1:-}" == "--demo" ]]; then
        echo -e "${YELLOW}🎭 Demo mode: Docker commands will be simulated${NC}"
        return 0
    fi
    
    if ! command -v docker > /dev/null; then
        echo -e "${RED}❌ Docker not installed${NC}"
        echo -e "${YELLOW}💡 Install with: brew install --cask docker${NC}"
        echo -e "${CYAN}🎭 Or run with --demo flag to test interface${NC}"
        exit 1
    fi
    
    # Check if Docker is running
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}❌ Docker is not running${NC}"
        echo -e "${YELLOW}💡 Start Docker Desktop first${NC}"
        echo -e "${CYAN}🎭 Or run with --demo flag to test interface${NC}"
        exit 1
    fi
}

# Load container definitions
load_containers() {
    if [[ ! -f "$CONTAINERS_CONFIG" ]]; then
        echo -e "${RED}❌ No containers config found at $CONTAINERS_CONFIG${NC}"
        exit 1
    fi
    
    yq eval '.containers | keys | .[]' "$CONTAINERS_CONFIG"
}

# Load VM definitions (macOS UTM support)
load_vms() {
    local utm_dir="$HOME/Library/Containers/com.utmapp.UTM/Data/Documents"
    if [[ -d "$utm_dir" ]]; then
        find "$utm_dir" -name "*.utm" -exec basename {} .utm \; 2>/dev/null | head -5
    fi
}

# Get container display name
get_container_name() {
    local container_key="$1"
    yq eval ".containers.${container_key}.name" "$CONTAINERS_CONFIG"
}

# Main menu with fzf magic
show_menu() {
    local options=()
    
    # Add containers
    while IFS= read -r container; do
        local name=$(get_container_name "$container")
        options+=("CONTAINER:$container:$name")
    done < <(load_containers)
    
    # Add VMs if available
    while IFS= read -r vm; do
        [[ -n "$vm" ]] && options+=("VM:$vm:🖥️ $vm")
    done < <(load_vms)
    
    # Add special options
    options+=(
        "SYSTEM:cleanup:🧹 Cleanup unused containers"
        "SYSTEM:running:📋 Show running containers"
        "SYSTEM:config:⚙️ Edit configuration"
        "SYSTEM:refresh:🔄 Refresh Docker images"
    )
    
    # Create the menu
    printf '%s\n' "${options[@]}" | \
        sed 's/^[^:]*:[^:]*://' | \
        fzf \
            --prompt="🚀 Select Development Environment: " \
            --height=60% \
            --layout=reverse \
            --border=rounded \
            --border-label=" Environment Launcher " \
            --preview='echo -e "🎯 {}\n\n📝 This will launch your selected environment\n⚡ Press ENTER to proceed\n🚫 Press ESC to cancel"' \
            --preview-window=right:40% \
            --header="⌘+D Environment Launcher | Use ↑↓ to navigate, ENTER to select" \
            --color="border:#6272a4,header:#8be9fd,prompt:#50fa7b"
}

# Launch container with enhanced features
launch_container() {
    local container_key="$1"
    
    echo -e "${BLUE}🚀 Launching container: $(get_container_name "$container_key")${NC}"
    
    # Get configuration
    local image=$(yq eval ".containers.${container_key}.image" "$CONTAINERS_CONFIG")
    local command=$(yq eval ".containers.${container_key}.command" "$CONTAINERS_CONFIG")
    local name="${container_key}-$(date +%s)"
    
    # Build docker command
    local docker_cmd="docker run -it --rm --name $name"
    
    # Add volumes with environment variable expansion
    local volumes=$(yq eval ".containers.${container_key}.volumes[]?" "$CONTAINERS_CONFIG" 2>/dev/null || true)
    while IFS= read -r volume; do
        if [[ -n "$volume" ]]; then
            # Expand environment variables
            volume=$(eval echo "$volume")
            docker_cmd+=" -v \"$volume\""
        fi
    done <<< "$volumes"
    
    # Add environment variables
    local envs=$(yq eval ".containers.${container_key}.environment[]?" "$CONTAINERS_CONFIG" 2>/dev/null || true)
    while IFS= read -r env; do
        [[ -n "$env" ]] && docker_cmd+=" -e \"$env\""
    done <<< "$envs"
    
    # Add image and command
    docker_cmd+=" \"$image\" $command"
    
    echo -e "${GREEN}🔧 Command: ${docker_cmd}${NC}"
    echo -e "${PURPLE}📁 Working directory will be mounted to /workspace${NC}"
    echo -e "${CYAN}🎯 Starting environment...${NC}\n"
    
    # Demo mode or real execution
    if [[ "${DEMO_MODE:-}" == "true" ]]; then
        echo -e "${YELLOW}🎭 DEMO: Would execute: $docker_cmd${NC}"
        echo -e "${CYAN}Press any key to continue...${NC}"
        read -n 1
    else
        # Execute with proper shell expansion
        eval "$docker_cmd"
    fi
}

# Launch VM (macOS UTM support)
launch_vm() {
    local vm_name="$1"
    
    echo -e "${BLUE}🖥️ Launching VM: $vm_name${NC}"
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS - use UTM URL scheme
        open "utm://start?name=$vm_name"
        echo -e "${GREEN}✅ VM launch command sent to UTM${NC}"
    else
        echo -e "${YELLOW}⚠️ VM launching not implemented for this OS yet${NC}"
    fi
}

# System functions
cleanup_containers() {
    echo -e "${BLUE}🧹 Cleaning up unused containers and images...${NC}"
    docker system prune -f
    echo -e "${GREEN}✅ Cleanup complete${NC}"
}

show_running() {
    echo -e "${BLUE}📋 Currently running containers:${NC}\n"
    docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
}

edit_config() {
    local editor="${EDITOR:-vim}"
    echo -e "${BLUE}⚙️ Opening configuration in $editor...${NC}"
    "$editor" "$CONTAINERS_CONFIG"
}

refresh_images() {
    echo -e "${BLUE}🔄 Refreshing Docker images...${NC}"
    while IFS= read -r container; do
        local image=$(yq eval ".containers.${container}.image" "$CONTAINERS_CONFIG")
        echo -e "${YELLOW}📦 Pulling $image...${NC}"
        docker pull "$image"
    done < <(load_containers)
    echo -e "${GREEN}✅ All images refreshed${NC}"
}

# Main execution
main() {
    # Check for demo mode
    if [[ "${1:-}" == "--demo" ]]; then
        export DEMO_MODE="true"
    fi
    
    # Show header
    echo -e "${PURPLE}"
    echo "╔══════════════════════════════════════════════════════════╗"
    echo "║                🚀 Environment Launcher Magic            ║"
    echo "║               Inspired by Jake@Linux                    ║"
    echo "╚══════════════════════════════════════════════════════════╝"
    echo -e "${NC}\n"
    
    check_deps "$1"
    
    local selection=$(show_menu)
    
    if [[ -z "$selection" ]]; then
        echo -e "${YELLOW}🚫 No selection made${NC}"
        exit 0
    fi
    
    # Parse selection (find original option with the displayed name)
    local option_line=$(printf '%s\n' \
        "CONTAINER:python-dev:🐍 Python Development" \
        "CONTAINER:node-dev:🟢 Node.js Development" \
        "CONTAINER:rust-dev:🦀 Rust Development" \
        "CONTAINER:test-env:🧪 Clean Test Environment" \
        "CONTAINER:alpine-minimal:🏔️ Alpine Minimal" \
        "CONTAINER:experimental:⚗️ Experimental Playground" \
        "SYSTEM:cleanup:🧹 Cleanup unused containers" \
        "SYSTEM:running:📋 Show running containers" \
        "SYSTEM:config:⚙️ Edit configuration" \
        "SYSTEM:refresh:🔄 Refresh Docker images" | \
        grep ":$selection$")
    
    local type=$(echo "$option_line" | cut -d':' -f1)
    local key=$(echo "$option_line" | cut -d':' -f2)
    
    case "$type" in
        "CONTAINER")
            launch_container "$key"
            ;;
        "VM")
            launch_vm "$key"
            ;;
        "SYSTEM")
            case "$key" in
                "cleanup") cleanup_containers ;;
                "running") show_running ;;
                "config") edit_config ;;
                "refresh") refresh_images ;;
                *) echo -e "${RED}❌ Unknown system command: $key${NC}" ;;
            esac
            ;;
        *)
            echo -e "${RED}❌ Unknown selection type: $type${NC}"
            ;;
    esac
}

main "$@"